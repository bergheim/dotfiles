;;; autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:


;;;### (autoloads nil "../../../evil-collection-mu4e" "../../../evil-collection-mu4e.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from ../../../evil-collection-mu4e.el

(register-definition-prefixes "../../../evil-collection-mu4e" '("evil-collection-mu4e-"))

;;;***

;;;### (autoloads nil "email.autoload" "email.autoload.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from email.autoload.el

(define-mu4e-search-fn bergheim/email-today "Opens the inbox with unread and today's email." "(date:1d..now) AND maildir:/Inbox/")

(define-mu4e-search-fn bergheim/email-inbox "Opens the entire inbox" "maildir:/Inbox/")

(define-mu4e-search-fn bergheim/email-important "Important email" "(maildir:/Inbox/ AND date:1w..now AND flag:unread) OR flag:flagged")

(define-mu4e-search-fn bergheim/email-inbox-work "Work email" "maildir:/neptune/Inbox/")

(define-mu4e-search-fn bergheim/email-inbox-personal "Personal email" "(maildir:/glvortex/Inbox/ OR maildir:/gmail/Inbox) AND (date:1w..now OR flag:unread)")

(define-mu4e-search-fn bergheim/email-today "Opens the inbox with unread and todays email" "(date:1d..now) AND maildir:/Inbox/")

(define-mu4e-search-fn bergheim/email-today-or-unread "Opens the inbox with unread and todays email" "maildir:/Inbox/ AND (date:1d..now OR flag:unread)")

(define-mu4e-search-fn bergheim/email-week "Opens the inbox with unread and this weeks email" "(date:1w..now) AND maildir:/Inbox/")

(define-mu4e-search-fn bergheim/email-sent "Sent email" "maildir:/Sent/")

(define-mu4e-search-fn bergheim/email-trash "Trash" "maildir:/Trash/ OR flag:trashed")

(define-mu4e-search-fn bergheim/email-junk "Show the junk mail from all accounts" "maildir:/Spam/")

(autoload 'bergheim/lookup-anything "email.autoload" "\
Look up a word in some way" t)

;;;***

;;;### (autoloads nil "orgmode" "orgmode.el" (0 0 0 0))
;;; Generated autoloads from orgmode.el

(autoload '+org-capture-todo-file "orgmode" "\
Expand `+org-capture-todo-file' from `org-directory'.
If it is an absolute path return `+org-capture-todo-file' verbatim.")

(autoload '+org-capture-notes-file "orgmode" "\
Expand `+org-capture-notes-file' from `org-directory'.
If it is an absolute path return `+org-capture-notes-file' verbatim.")

(autoload '+org-capture-project-todo-file "orgmode" "\
Find the nearest `+org-capture-todo-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project.")

(autoload '+org-capture-project-notes-file "orgmode" "\
Find the nearest `+org-capture-notes-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project.")

(autoload '+org-capture-project-changelog-file "orgmode" "\
Find the nearest `+org-capture-changelog-file' in a parent directory,
otherwise, opens a blank one at the project root. Throws an error if not in a
project.")

(register-definition-prefixes "orgmode" '("+org--capture-local-root"))

;;;***

;;;### (autoloads nil "projects" "projects.el" (0 0 0 0))
;;; Generated autoloads from projects.el
 (defvar projectile-project-root nil)
 (defvar projectile-enable-caching (not noninteractive))
 (defvar projectile-require-project-root 'prompt)

(autoload 'project-file-exists-p! "projects" "\
Checks if FILES exist at the current project's root.

The project's root is determined by `projectile', starting from BASE-DIRECTORY
\(defaults to `default-directory'). FILES are paths relative to the project root,
unless they begin with a slash.

\(fn FILES &optional BASE-DIRECTORY)" nil t)

(autoload 'doom/find-file-in-other-project "projects" "\
Performs `projectile-find-file' in a known project of your choosing.

\(fn PROJECT-ROOT)" t)

(autoload 'doom/browse-in-other-project "projects" "\
Performs `find-file' in a known project of your choosing.

\(fn PROJECT-ROOT)" t)

(autoload 'doom/browse-in-emacsd "projects" "\
Browse files from `doom-emacs-dir'." t)

(autoload 'doom/find-file-in-emacsd "projects" "\
Find a file under `doom-emacs-dir', recursively." t)

(autoload 'doom/add-directory-as-project "projects" "\
Register an arbitrary directory as a project.

Unlike `projectile-add-known-project', if DIR isn't a valid project, a .project
file will be created within it so that it will always be treated as one. This
command will throw an error if a parent of DIR is a valid project (which would
mask DIR).

\(fn DIR)" t)

(autoload 'doom-project-p "projects" "\
Return t if DIR (defaults to `default-directory') is a valid project.

\(fn &optional DIR)")

(autoload 'doom-project-root "projects" "\
Return the project root of DIR (defaults to `default-directory').
Returns nil if not in a project.

\(fn &optional DIR)")

(autoload 'doom-project-name "projects" "\
Return the name of the current project.

Returns '-' if not in a valid project.

\(fn &optional DIR)")

(autoload 'doom-project-expand "projects" "\
Expand NAME to project root.

\(fn NAME &optional DIR)")

(autoload 'doom-project-find-file "projects" "\
Jump to a file in DIR (searched recursively).

If DIR is not a project, it will be indexed (but not cached).

\(fn DIR)")

(autoload 'doom-project-browse "projects" "\
Traverse a file structure starting linearly from DIR.

\(fn DIR)")

(autoload 'doom-project-ignored-p "projects" "\
Return non-nil if temporary file or a straight package.

\(fn PROJECT-ROOT)")

;;;***

;;;### (autoloads nil nil ("../../../private.el") (0 0 0 0))

;;;***

;;; End of scraped data

(provide 'autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; autoloads.el ends here
