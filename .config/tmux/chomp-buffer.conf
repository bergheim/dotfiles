# vim: set ft=tmux:

# nicked from https://github.com/rwstauner/run_control/blob/master/tmux/chomp-buffer.conf
# Remove trailing newlines from buffers before pasting.

# Use vars to nest quotes.
buffer_args='"$@"'
buffer_name='"%%"'
chomp="perl -0777 -pe s/\\\\n+\\\\z//m | \${TMUX_BUFFER_FILTER:-cat}"

# The template string (choose-buffer) will only replace one `%%`.
# Since we need to pass that to each tmux command
# pass it once at the end as args to a function.

constant_buffer=tmux_chomp_buffer_constant
paste_last_buffer="paste-buffer -p -d -b $constant_buffer"
chomp_buffer="_ () { tmux save-buffer $buffer_args - | $chomp | tmux load-buffer $buffer_args -; tmux save-buffer $buffer_args - | tmux load-buffer -b $constant_buffer -; }; _"

# Use if-shell instead of 'new-window -d' because (as of 2.0) new-windows
# considers itself to be the current pane, and "previous" is still previous, so
# the actual target window is in between previous and current.
# So modify the buffer then save it in a constant name so that after the shell
# has closed the original current pane can call the final paste-buffer command
# (with itself as the target).

bind-key '#' choose-buffer "if-shell '$chomp_buffer -b $buffer_name' '$paste_last_buffer'"

# Instead of passing no args and having the function delete the last buffer
# before loading (which seems dangerous and unreliable) determine the name of
# the top buffer and pass it directly.
# Use (upper case) env var and escape it to delay evaluation
# as we are at too many levels of shell quoting to get the command to pass reliably.
TMUX_BUFFER_NAME_FORMAT='#{buffer_name}'
last_buffer_cmd="`tmux list-buffers -F \$TMUX_BUFFER_NAME_FORMAT | head -n 1`"
bind-key ] if-shell "$chomp_buffer -b $last_buffer_cmd" "$paste_last_buffer"


# Don't persist vars in global env.
setenv -g -u buffer_args
setenv -g -u buffer_name
setenv -g -u chomp
setenv -g -u constant_buffer
setenv -g -u paste_last_buffer
setenv -g -u chomp_buffer
setenv -g -u last_buffer_cmd
